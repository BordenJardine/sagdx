(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/borden/src/sagdx/src/js/data/CinderProfiles.js":[function(require,module,exports){
var CinderProfiles = function() {
};

CinderProfiles.PROFILES = [
  {
    name: 'Girl Next Door',
    image: 'frog_profile.png',
    correctDirection: 1,
    revealImage: 'frog_reveal.png',
    revealImage2: 'frog_reveal2.png',
    revealText: 'GET OUT',
    minigame: 'FrogGame',
    minigameDirection: 1
  },
  {
    name: 'Ella',
    image: 'cinderella_profile.jpg',
    correctDirection: 1,
    revealImage: 'cinderella_reveal.jpg',
    revealText: 'TeH B1g R3V34l!!!1',
    minigame: 'CinderellaGame',
    minigameDirection: 1
  },
  {
    name: 'beachgrl',
    image: 'mermaid_profile.jpg',
    correctDirection: 1,
    revealImage: 'mermaid1.png',
    revealText: 'OH OH HOW DOES THIS WORK?',
    minigame: 'MermaidGame',
    minigameDirection: 1
  },
  {
    name: 'loliterallydead',
    image: 'dance_profile.jpg',
    correctDirection: 1,
    revealImage: 'dancing_reveal.jpg',
    revealText: 'WANNA DANCE?',
    minigame: 'DDRGame',
    minigameDirection: 1
  },
  {
    name: 'Gorgon Girl',
    image: 'medusa_before.png',
    correctDirection: 1,
    revealImage: 'medusa_after.png',
    revealText: "OH NO IT'S A GORGON",
    minigame: 'SnakeGame',
    minigameDirection: 1
  },
  {
    name: 'Dr. Huxtable',
    image: 'cosby_before.jpg',
    correctDirection: 1,
    revealImage: 'cosby_after.jpg',
    revealText: "Zip Zop Zoobity Bop!",
    minigame: 'CupGame',
    minigameDirection: 1
  },
  {
    name: 'Liberty Abs',
    image: 'lib_profile.jpg',
    correctDirection: 1,
    revealImage: 'lib_reveal.jpg',
    revealText: 'LIBERTARIANS',
    minigame: 'FlatTaxGame',
    minigameDirection: 1
  },
  {
    name: 'Tazwell',
    image: 'tch_profile.png',
    correctDirection: 1,
    revealImage: 'tch_reveal.png',
    revealText: 'THIS CAT IS HORSESHIT',
    minigame: 'ThisCatIsHorseShit',
    minigameDirection: 1
  }
];

module.exports = CinderProfiles;

},{}],"/Users/borden/src/sagdx/src/js/entities/CinderProfile.js":[function(require,module,exports){
var CinderProfile = function(game, direction) {
  Phaser.Group.call(this, game);
  this.game = game;
  this.profile = null;
  this.selectionResult = null;
  this.generateProfile(direction);
};

CinderProfile.prototype = Object.create(Phaser.Group.prototype);
CinderProfile.prototype.constructor = CinderProfile;

CinderProfile.prototype.generateProfile = function(direction) {
  // Generate or randomly pick already generated image
  // Generate or randomly pick already generated profile text
  // Generate result of R/L swipes for this profile

  window.CurrentProfileIdx += 1;
  if (window.CurrentProfileIdx === window.CinderProfiles.length)
    window.CurrentProfileIdx = 0;

  this.profile = window.CinderProfiles[window.CurrentProfileIdx];

  var width = this.game.width;
  var cinderFrameW = this.game.cache.getImage('cinderFrame').width;
  var cinderFrameH = this.game.cache.getImage('cinderFrame').height;
  var headerH = this.game.cache.getImage('header').height;
  var offsetX = (width - cinderFrameW) / 2;
  var offsetY = offsetX / 2;
  var textMargin = 25;

  if (direction === 1)
    this.x = -width;
  else
    this.x = width * 2;

  this.image = this.create(offsetX, headerH + offsetY, this.profile.image);
  this.frame = new Phaser.Sprite(this.game, 0, 0, 'cinderFrame');
  this.name = new Phaser.Text(this.game, textMargin, cinderFrameH - textMargin * 2, this.profile.name);

  this.image.addChild(this.frame);
  this.image.addChild(this.name);

  var tween = this.game.add.tween(this);
  tween.to({ x: 0 }, 500, Phaser.Easing.Cubic.Out, true);
  tween.start();
};

module.exports = CinderProfile;

},{}],"/Users/borden/src/sagdx/src/js/entities/Interstitial.js":[function(require,module,exports){
var Interstitial = function(game, instructs, timeout, callback, ctx) {
  Phaser.Group.call(this, game);
  this.game = game;
  this.ctx = ctx;
  this.callback = callback;

  this.updateTime = 0;

  var x = this.game.width / 2;
  var y = this.game.height / 2;

  this.blackout = game.add.graphics(0, 0);
  this.currentFill = 0x000000;
  this.blackout.beginFill(this.currentFill, 1);
  this.blackout.boundsPadding = 0;
  this.blackout.drawRect(0, 0, this.game.width, this.game.height);

  this.match = this.game.add.image(0, 0, 'match');
  this.match.x = (this.game.width / 2) - (this.match.width / 2)
  this.match.y = (this.game.height / 4) - (this.match.height / 2)

  this.instruct = this.game.add.text(x, y, instructs, { fill: '#ffffff' });
  this.instruct.x -= (this.instruct.width / 2);
  this.instruct.y -= (this.instruct.height / 2);

  this.add(this.blackout);
  this.add(this.instruct);

  this.game.time.events.add(timeout, this.tearDown, this);
};

Interstitial.prototype = Object.create(Phaser.Group.prototype);
Interstitial.prototype.constructor = Interstitial;

Interstitial.prototype.update = function() {
  this.updateTime += 1;

  if (this.updateTime % 3 === 0) {
    // no XOR in JS...
    this.currentFill = !this.currentFill ? 0xFFFFFF : 0;
    var textFill = !this.currentFill ? '#FFFFFF' : '#000000';
    this.instruct.setStyle({'fill': textFill});
  }
};

Interstitial.prototype.tearDown = function() {
  this.match.kill();
  this.callback.call(this.ctx);
};

module.exports = Interstitial;

},{}],"/Users/borden/src/sagdx/src/js/entities/ProfileReveal.js":[function(require,module,exports){
//This is a sprite that is displayed after the player chooses/rejects a profile
var ProfileReveal = function(game, x, y, profile) {
  Phaser.Sprite.call(this, game, x, y, profile.revealImage);

  this.profile = profile;

  var textArea = new Phaser.Sprite(game, 0, this.height, 'revealTextArea');

  var text = new Phaser.Text(game, 25, this.height + 25, profile.revealText);

  text.x = (textArea.width / 2) - (text.width / 2);
  text.y = textArea.y + (textArea.height / 2) - (text.height / 2);

  this.inputEnabled = true;

  if(!!profile.revealImage2) {
    setTimeout(loadSecondImage.bind(this), 700);
  }

  this.addChild(textArea);
  this.addChild(text);
};

var loadSecondImage = function() {
  if(this.game) this.loadTexture(this.profile.revealImage2);
};

ProfileReveal.prototype = Object.create(Phaser.Sprite.prototype);
ProfileReveal.prototype.constructor = ProfileReveal;

module.exports = ProfileReveal;

},{}],"/Users/borden/src/sagdx/src/js/entities/Timer.js":[function(require,module,exports){
var Timer = function(game, baseTime, endCallback, ctx, reverse) {
  Phaser.Sprite.call(this, game, -6, game.height - 8, 'timer-animation');
  this.game = game;

  this.longer = reverse || false;

  this.baseTime = baseTime;
  this.timer = null;
  this.timerTime = baseTime - (window.SpeedMultiplier * 10);

  if (this.longer)
    this.timerTime += (window.SpeedMultiplier * 10) * 2;

  this.timeDestroyed = false;
  this.timerTween = null;

  this.onTimerTweenComplete = endCallback;
  this.context = ctx;

  this.setup();
  this.game.add.existing(this);
};

Timer.prototype = Object.create(Phaser.Sprite.prototype);
Timer.prototype.constructor = Timer;

Timer.prototype.start = function() {
  this.timerDestroyed = false;
  this.timerTween.start();
  this.timer = this.game.time.events.add(this.timerTime, function() {});
};

Timer.prototype.setup = function() {
  this.x = -6;
  this.timerTime = this.baseTime - (window.SpeedMultiplier * 10);
  if (this.longer)
    this.timerTime += (window.SpeedMultiplier * 10) * 2;

  this.timeDestroyed = false;
  this.timerTween = this.game.add.tween(this).to({ x: this.game.width }, this.timerTime);
  if (typeof this.onTimerTweenComplete !== "undefined")
    this.timerTween.onComplete.add(this.onTimerTweenComplete.bind(this.context), this);
};

Timer.prototype.end = function() {
  if(!this.game) return;
  this.timerDestroyed = true;
  this.game.tweens.remove(this.timerTween);
  this.game.time.events.remove(this.timer);

  this.setup();
};

module.exports = Timer;

},{}],"/Users/borden/src/sagdx/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(414, 606, Phaser.AUTO, 'body');

window.TOTAL_GAMES = 8;

window.Utils = require('./utils');
window.Score = 0;
window.Lives = 8;
window.SpeedMultiplier = 1.0;
window.Games = 0;
window.PlayedGames = 0;

game.state.add('Boot', require('./states/boot'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Splash', require('./states/splash'));
game.state.add('ClickMe', require('./states/clickme'));
game.state.add('warning', require('./states/warning'));
game.state.add('SAGDX', require('./states/sagdx'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('gameover', require('./states/gameover'));

game.state.add('CinderellaGame', require('./states/cinderellagame'));
game.state.add('FrogGame', require('./states/froggame'));
game.state.add('MermaidGame', require('./states/mermaidgame'));
game.state.add('DDRGame', require('./states/ddrgame'));
game.state.add('SnakeGame', require('./states/snakegame'));
game.state.add('CupGame', require('./states/cupgame'));
game.state.add('FlatTaxGame', require('./states/flattaxgame'));
game.state.add('ThisCatIsHorseShit', require('./states/thiscatishorseshit'));

game.state.start('Boot');

},{"./states/boot":"/Users/borden/src/sagdx/src/js/states/boot.js","./states/cinderellagame":"/Users/borden/src/sagdx/src/js/states/cinderellagame.js","./states/clickme":"/Users/borden/src/sagdx/src/js/states/clickme.js","./states/cupgame":"/Users/borden/src/sagdx/src/js/states/cupgame.js","./states/ddrgame":"/Users/borden/src/sagdx/src/js/states/ddrgame.js","./states/flattaxgame":"/Users/borden/src/sagdx/src/js/states/flattaxgame.js","./states/froggame":"/Users/borden/src/sagdx/src/js/states/froggame.js","./states/game":"/Users/borden/src/sagdx/src/js/states/game.js","./states/gameover":"/Users/borden/src/sagdx/src/js/states/gameover.js","./states/menu":"/Users/borden/src/sagdx/src/js/states/menu.js","./states/mermaidgame":"/Users/borden/src/sagdx/src/js/states/mermaidgame.js","./states/preloader":"/Users/borden/src/sagdx/src/js/states/preloader.js","./states/sagdx":"/Users/borden/src/sagdx/src/js/states/sagdx.js","./states/snakegame":"/Users/borden/src/sagdx/src/js/states/snakegame.js","./states/splash":"/Users/borden/src/sagdx/src/js/states/splash.js","./states/thiscatishorseshit":"/Users/borden/src/sagdx/src/js/states/thiscatishorseshit.js","./states/warning":"/Users/borden/src/sagdx/src/js/states/warning.js","./utils":"/Users/borden/src/sagdx/src/js/utils.js"}],"/Users/borden/src/sagdx/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;
    this.game.stage.backgroundColor = 0xffffff;

    if (!this.game.device.iPhone) {
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.pageAlignVertically = true;
    }

    if (!this.game.device.desktop) {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;

      this.game.scale.minWidth =  260;
      this.game.scale.minHeight = 480;
      this.game.scale.maxWidth = 414;
      this.game.scale.maxHeight = 736;
    }

    this.game.scale.refresh();

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/borden/src/sagdx/src/js/states/cinderellagame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');

var CinderellaGame = function () {
};

CinderellaGame.prototype = {
  create: function () {
    var slipperW = this.game.cache.getImage('slipper').width;
    var slipperH = this.game.cache.getImage('slipper').height;

    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');

    this.TextManager = new TextManager(this.game);
    this.Timer = null;

    this.input.onDown.add(this.onDown, this);
    this.game.add.sprite(0, 120, 'foot');
    this.slipper = this.game.add.sprite(this.game.width - slipperW + 20, slipperH, 'slipper');
    this.movement = 2.3 * window.SpeedMultiplier;
    this.ready = false;

    var that = this;
    this.inter = new Interstitial(this.game, "GET THE FOOT", 1500, function() {
      this.inter.destroy();
      this.ready = true;
      this.Timer = new Timer(this.game, 2500, this.onTimerComplete, this);
      this.Timer.start();
    }, this);
  },

  update: function () {
    if (!this.ready)
      return;

    this.slipper.y += this.movement;

    if (this.slipper.y > this.game.height - this.slipper.height)
      this.movement *= -1;
    if (this.slipper.y < this.slipper.height)
      this.movement *= -1;
  },

  onTimerComplete: function () {
    this.lose();
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(4000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(4000, this.end, this);
  },

  onDown: function () {
    if (!this.ready)
      return;

    this.Timer.end();

    this.slipper.x -= 20;
    if (this.slipper.y > 260 && this.slipper.y < 305) {
      this.win();
    } else {
      this.lose();
    }
  },

  end: function() {
    this.game.state.start('Game');
  }
};

module.exports = CinderellaGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/clickme.js":[function(require,module,exports){
var ClickMe = function () {
};

module.exports = ClickMe;

ClickMe.prototype = {
  create: function () {
    this.game.stage.backgroundColor = '#ffffff';

    var startText = "Press to start!";
    var textProps = { font: '24pt Arial',
                      fill: '#C24300',
                      strokeThickness: 0 };

    var text = this.game.add.text(0, 0, startText, textProps);

    text.x = (this.game.width / 2) - (text.width / 2);
    text.y = (this.game.height / 2) - (text.height / 2);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    if (!this.game.device.desktop) {
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.startFullScreen(true);
    }

    this.startGame();
  },

  startGame: function() {
    if (this.game.device.desktop) {
      this.game.state.start('warning');
    } else {
      this.game.state.start('SAGDX');
    }
  }
};

},{}],"/Users/borden/src/sagdx/src/js/states/cupgame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');

var BASE_CUP_SWAPS = 4;
var CUP_X = 100;

var Cup = function(game, x, y, drugged) {
  Phaser.Sprite.call(this, game, x, y, 'cup');

  this.drugged = drugged;
}

Cup.prototype = Object.create(Phaser.Sprite.prototype);
Cup.prototype.constructor = Cup;

var CupGame = function () {
};

CupGame.prototype = {
  create: function () {

    this.boo = this.game.add.audio('boo');

    var state = this;
    if (!this.game.device.desktop) this.input.onDown.add(this.goFullscreen, this);

    this.TextManager = new TextManager(this.game);

    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');

    this.ready = false;

    this.background = this.game.add.image(0, 0, 'cosbyBg');

    this.cups = this.game.add.group();
    for (var i = 0; i < 3; i++) {
      var cup = this.game.add.existing(new Cup(this.game, CUP_X, 20 + i * 120, false));
      this.cups.add(cup);
    }

    this.cupSwaps = BASE_CUP_SWAPS * Math.floor(window.SpeedMultiplier);

    this.TimeUp = new Timer(this.game, 10000, this.onTimeUp, this);

    this.inter = new Interstitial(this.game, "ZIP ZOP ZOOBITY BOP", 1500, function() {
      this.inter.destroy();

      this.drugCups(function() {
        state.scrambleCups(state.cupSwaps, function() {
          state.ready = true;
          state.TimeUp.start();
          state.cupSelection();
        });
      });

    }, this);

  },

  goFullscreen: function() {
    if (this.game.scale.isFullScreen) return;
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.startFullScreen(true);
  },

  onTimeUp: function () {
    this.lose();
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(2000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.TimeUp.end();
    this.game.time.events.add(2000, this.end, this);
  },

  end: function() {
    this.game.state.start('Game');
    this.game.stage.backgroundColor = '#FFFFFF';
  },

  scrambleCups: function(swapsRemaining, callback) {
    var cupIndexes = this.twoRandomCupIndexes();
    
    this.swapCups(cupIndexes[0], cupIndexes[1], (function() {
      if(!swapsRemaining) {
        callback();
      } else {
        swapsRemaining -= 1;
        this.scrambleCups(swapsRemaining, callback);
      }
    }).bind(this));
  },

  swapCups: function(index1, index2, callback) {
    var cup1 = this.cups.children[index1];
    var cup2 = this.cups.children[index2];

    var yCoord = cup1.y + (cup2.y - cup1.y)
    var leftX = 0 - this.game.width / 3;
    var rightX = this.game.width - cup1.width + this.game.width / 3;

    var time = 200 + (500 / window.SpeedMultiplier);

    // tween the object down in a linear fashion
    this.game.add.tween(cup1).to({y: cup2.y }, time).start();
    this.game.add.tween(cup2).to({y: cup1.y }, time).start();

    var cup1Tween = this.game.add.tween(cup1)
      .to({x: leftX}, time * 0.5, Phaser.Easing.Sinusoidal.Out).start();

    cup1Tween.onComplete.add(function() {
      this.swapCupDisplayOrder(index1, index2);
      this.game.add.tween(cup1)
        .to({x: CUP_X}, time * 0.5, Phaser.Easing.Sinusoidal.In).start();
    }, this);

    var cup2Tween = this.game.add.tween(cup2)
      .to({x: rightX}, time / 2, Phaser.Easing.Sinusoidal.Out)
      .to({x: CUP_X}, time / 2, Phaser.Easing.Sinusoidal.In)
      .start();

    cup2Tween.onComplete.add(callback, this);
  },

  twoRandomCupIndexes: function() {
    var rands = [0, 0];

    while(rands[0] == rands[1]) {
      rands[0] = Math.floor(Math.random() * 3);
      rands[1] = Math.floor(Math.random() * 3);
    }

    rands.sort();

    return [rands[0], rands[1]];
  },

  swapCupDisplayOrder: function(index1, index2) {
    var tmp = this.cups.children[index1];
    this.cups.children[index1] = this.cups.children[index2];
    this.cups.children[index2] = tmp;
  },

  drugCups: function(callback) {
    var state = this;
    var indexes = this.twoRandomCupIndexes();
    var cup1 = this.cups.children[indexes[0]];
    var cup2 = this.cups.children[indexes[1]];

    this.drugAnimation(cup1, function() {
      state.drugAnimation(cup2, function() {
        callback();
      });
    });
  },

  drugAnimation: function(cup, callback) {
    var state = this;

    var pill = this.game.add.sprite(this.game.width / 2, -50, 'pill');
    pill.animations.add('flip');
    pill.animations.play('flip', 10, true);

    var pillTween = this.game.add.tween(pill).to({y: cup.y + 25 }, 500).start();
    pillTween.onComplete.add(function() {
      cup.drugged = true;
      this.boo.play();
      this.splashAnimation(pill, callback);
    }, this);
  },

  splashAnimation: function(pill, callback) {
      var splash = this.game.add.sprite(0, 0, 'splash');

      splash.x = (pill.x + pill.width / 2) - splash.width / 2
      splash.y = (pill.y + pill.height / 2) - splash.height / 2

      var anim = splash.animations.add('splash');

      anim.onComplete.add(function() {
        splash.kill();
        callback();
      });

      anim.play(10);
      pill.kill();
  },

  cupSelection: function(){
    var state = this;
    var cups = this.cups.children;

    for(i in cups) {
      (function(cup) {
        cup.events.onInputDown.add(function() {
          if(!state.ready) return;
          if(cup.drugged) return state.lose();
          return state.win();
        }, state);

        cup.inputEnabled = true;
      })(cups[i]);
    }
  }
};

module.exports = CupGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/ddrgame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var SwipeManager = require('../utilities/SwipeManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');

var DDRGame = function () {
};

var REQUIRED_HIT_PERCENTAGE = .75;

DDRGame.prototype = {
  create: function () {
    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');

    this.yay = this.game.add.audio('yay');
    this.boo = this.game.add.audio('boo');

    this.ready = false;
    this.Timer = null;
    this.TextManager = new TextManager(this.game);

    this.game.stage.backgroundColor = "#000000";

    this.skelly = this.game.add.sprite(50, 100, 'skelly');
    this.skelly.animations.add('dance');
    this.skelly.animations.play('dance', 1.2 * window.SpeedMultiplier, true);

    this.game.plugins.add(new SwipeManager(this.game, this.swipe, this, true));

    var width = this.game.cache.getImage('up-arrow').width / 4;
    var height = this.game.cache.getImage('up-arrow').height;
    var padding = Math.floor((this.game.stage.width - (width * 2 + height * 2)) / 5);

    this.up = this.game.add.sprite(padding, this.topPadding, 'up-arrow');
    this.up.animations.add('blues');
    this.up.animations.play('blues', 10, true);
    this.down = this.game.add.sprite(padding * 2 + width, this.topPadding, 'down-arrow');
    this.down.animations.add('reds');
    this.down.animations.play('reds', 10, true);

    this.left = this.game.add.sprite(padding * 3 + width * 2, height / 2 - 20, 'left-arrow');
    this.left.animations.add('greens');
    this.left.animations.play('greens', 10, true);
    this.right = this.game.add.sprite(padding * 4 + width * 2 + height, height / 2 - 20, 'right-arrow');
    this.right.animations.add('oranges');
    this.right.animations.play('oranges', 10, true);

    this.arrowSpeed = 3 * window.SpeedMultiplier;
    this.arrows = [];
    this.arrowCooldown = 55;
    this.cooldown = 0;
    this.onCooldown = false;

    this.hits = 0;
    this.arrowCount = 0;

    this.emitter = this.game.add.emitter(0, 0, 100);
    this.emitter.makeParticles('spark');

    this.inter = new Interstitial(this.game, "DANCE OFF", 1500, function() {
      this.inter.destroy();
      this.Timer = new Timer(this.game, 6500, this.onTimerComplete, this, true);
      this.game.time.events.add(1500, function() {
        this.Timer.start();
      }, this);
      this.ready = true;
    }, this);
  },

  update: function () {
    if (!this.ready)
      return;

    var removeIdx = -1;

    for (var i = 0; i < this.arrows.length; i++) {
      var arrow = this.arrows[i];

      if (((arrow.dir === 3 || arrow.dir === 2) && arrow.y <= this.up.y) ||
          ((arrow.dir === 1 || arrow.dir == 0) && arrow.y <= this.right.y)) {
        removeIdx = i;
        this.arrowCount += 1;
        arrow.destroy();
      }
      else
        arrow.y -= this.arrowSpeed;
    }

    if (removeIdx >= 0) this.arrows.splice(removeIdx, 1);

    if (this.arrowCooldown === this.cooldown) {
      this.onCooldown = false;
      this.cooldown = 0;
    }
    if (this.onCooldown)
      this.cooldown += 1;

    if (!this.onCooldown) {
      var spawn = Math.floor(Math.random() * 10) + 1 > 6;
      if (spawn) {
        var dir = Math.floor(Math.random() * 4);
        var arrow = null;

        switch(dir) {
        case 0:
          arrow = this.game.add.sprite(this.left.x, this.game.height + this.left.height, 'left-arrow');
          break;
        case 1:
          arrow = this.game.add.sprite(this.right.x, this.game.height + this.left.height, 'right-arrow');
          break;
        case 2:
          arrow = this.game.add.sprite(this.up.x, this.game.height + this.up.height, 'up-arrow');
          break;
        case 3:
          arrow = this.game.add.sprite(this.down.x, this.game.height + this.down.height, 'down-arrow');
          break;
        }

        arrow.animations.add('anim');
        arrow.animations.play('anim', 10, true);
        arrow.dir = dir;
        this.arrows.push(arrow);
        this.onCooldown = true;
      }
    }
  },

  onTimerComplete: function () {
    if (this.hits > this.arrowCount * REQUIRED_HIT_PERCENTAGE)
      this.win();
    else
      this.lose();
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(4000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(4000, this.end, this);
  },

  swipe: function (dir) {
    var hit = false;

    for (var i = 0; i < this.arrows.length; i++) {
      var arrow = this.arrows[i];
      if (arrow.y <= this.up.y + this.up.height) {
        if (arrow.dir === dir) {
          hit = true;
          this.hits += 1;
          this.yay.play();
        } else {
          hit = false;
          this.hits -= 1;
          this.boo.play();
        }

        if (hit) {
          switch (dir) {
          case 0:
            this.emitter.x = this.left.x + this.left.width / 2;
            this.emitter.y = this.left.y + this.left.height / 2;
            break;
          case 1:
            this.emitter.x = this.right.x + this.right.width / 2;
            this.emitter.y = this.right.y + this.right.height / 2;
            break;
          case 2:
            this.emitter.x = this.up.x + this.up.width / 2;
            this.emitter.y = this.up.y + this.up.height / 2;
            break;
          case 3:
            this.emitter.x = this.down.x + this.down.width / 2;
            this.emitter.y = this.down.y + this.down.height / 2;
            break;
          }
          this.emitter.start(true, 1000, null, 10);
        }
      }
    }

    switch (dir) {
    case 0:
    this.game.add.tween(this.left.scale)
        .to({ x: 1.2, y: 1.2 }, 100, Phaser.Easing.Linear.None, true, 0, 0, true);
    break;
    case 1:
    this.game.add.tween(this.right.scale)
        .to({ x: 1.2, y: 1.2 }, 100, Phaser.Easing.Linear.None, true, 0, 0, true);
    break;
    case 2:
    this.game.add.tween(this.up.scale)
        .to({ x: 1.2, y: 1.2 }, 100, Phaser.Easing.Linear.None, true, 0, 0, true);
    break;
    case 3:
    this.game.add.tween(this.down.scale)
        .to({ x: 1.2, y: 1.2 }, 100, Phaser.Easing.Linear.None, true, 0, 0, true);
    break;
    }
  },

  end: function() {
    this.game.stage.backgroundColor = "#ffffff";
    this.game.state.start('Game');
  }
};

module.exports = DDRGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/SwipeManager.js":"/Users/borden/src/sagdx/src/js/utilities/SwipeManager.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/flattaxgame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var SwipeManager = require('../utilities/SwipeManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');

var FlatTaxGame = function () {
};

NUM_SEGMENTS = 5;

FlatTaxGame.prototype = {
  create: function () {
    this.ready = false;

    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');

    this.Timer = new Timer(this.game, 6500, this.onTimerComplete, this, true);
    this.TextManager = new TextManager(this.game);
    this.game.plugins.add(new SwipeManager(this.game, this.swipe, this, true));
    this.segments = [];
    this.graphics = this.game.add.graphics(0, 0);
    this.graphics.lineStyle(3, 0x000000);

    this.game.add.sprite(0, 0, 'taxbg');
    var header = this.game.add.text(this.game.world.centerX, 20, "U.S. Tax Code", {
      font: '45px serif',
      fill: '#000000',
      align: 'center'
    });
    header.x -= (header.width / 2);
    var sub = this.game.add.text(this.game.world.centerX, 24 + header.height,
                                 "Fig 2.0.1, Marginal Tax Rate", {
      font: '24px serif',
      fill: '#000000',
      align: 'center'
    });
    sub.x -= (sub.width / 2);

    var segmentLength = this.game.width / NUM_SEGMENTS;
    var top = this.game.height / 1.5;
    var bot = this.game.height / 3;
    var level = (this.game.height / 2);
    var whereToGo = {
      0: top,
      1: level,
      2: bot
    };
    var start = { x: 0, y: whereToGo[Math.floor(Math.random() * 3)] };
    for (var i = 0; i < NUM_SEGMENTS; i++) {
      var endY = (start.y === top) ? level :
            (start.y === bot) ? level : whereToGo[Math.floor(Math.random() * 3)];
      var end = {
        x: start.x + segmentLength,
        y: endY
      };
      var line = new Phaser.Line(start.x, start.y, end.x, end.y);
      line.leveled = false;
      this.segments.push(line);
      if (line.start.y === line.end.y) line.leveled = true;
      start = { x: end.x, y: end.y };
    }

    this.graphics.moveTo(this.segments[0].start.x, this.segments[0].start.y);

    this.inter = new Interstitial(this.game, "FLATTEN THE TAX", 1500, function() {
      this.inter.destroy();
      this.Timer.start();
      this.ready = true;
    }, this);
  },

  findSlopeDirection: function(line) {
    return (line.start.y < line.end.y) ? -1 :
      (line.start.y === line.end.y) ? 0 : 1;
  },

  flattenLine: function(line) {
    var slopeDir = this.findSlopeDirection(line);
    switch (slopeDir) {
    case 1:
      if (line.end.y >= (this.game.height / 2)) line.start.y = line.end.y;
      else line.end.y = line.start.y;
      break;
    case -1:
      if (line.end.y > (this.game.height / 2)) line.end.y = line.start.y;
      else line.start.y = line.end.y;
      break;
    case 0:
      return;
    }
  },

  swipe: function (dir, start, end) {
    var swipeLine = new Phaser.Line(start.x, start.y, end.x, end.y);
    for (var i = 0; i < this.segments.length; i++) {
      var seg = this.segments[i];
      var flatten = false;

      if (seg.leveled) continue;

      var int = swipeLine.intersects(seg, true);

      if (int) {
        if (int.y > (this.game.height / 2)) {
          if (dir !== 2) continue;
          flatten = true;
        }
        else if (int.y < (this.game.height / 2)) {
          if (dir !== 3) continue;
          flatten = true;
        }

        if (flatten) {
          var slopeDir = this.findSlopeDirection(seg);
          var nextSlope = 0;
          var prevSlope = 0;
          var prevI = (slopeDir === 1) ? -1 : 1;
          var nextI = (slopeDir === 1) ? 1 : -1;

          var prev = this.segments[i + prevI];
          if (prev)
            prevSlope = this.findSlopeDirection(prev);
          var next = this.segments[i + nextI];
          if (next)
            nextSlope = this.findSlopeDirection(next);

          if (nextSlope != slopeDir && nextSlope != 0) {
            this.flattenLine(next);
            next.leveled = true;
          }
          else if (prevSlope != slopeDir && prevSlope != 0) {
            this.flattenLine(prev);
            prev.leveled = true;
          }

          this.flattenLine(seg);
          seg.leveled = true;
        }
      }
    }
  },

  update: function () {
    if (!this.ready)
      return;
  },

  render: function() {
    this.graphics.clear();
    for (i = 0; i < this.segments.length; i++) {
      this.graphics.lineStyle(3, 0x000000);
      var seg = this.segments[i];
      var slope = this.findSlopeDirection(seg);
      var cpx1 = 0;
      var cpx2 = 0;
      var cpy1 = 0;
      var cpy2 = 0;
      var wDiff = seg.start.x - seg.end.x;
      var hDiff = Math.abs(seg.start.y - seg.end.y);
      this.graphics.moveTo(seg.start.x, seg.start.y);

      switch (slope) {
      case 0:
        cpx1 = seg.start.x + (wDiff / 3);
        cpx2 = seg.start.x + (wDiff / 3) * 2;
        cpy1 = seg.start.y;
        cpy2 = seg.start.y;
        break;
      case 1:
      case -1:
        cpx1 = seg.end.x;
        cpy1 = seg.start.y;
        cpx2 = seg.start.x;
        cpy2 = seg.end.y;
        break;
      }

      this.graphics.bezierCurveTo(cpx1,
                                  cpy1,
                                  cpx2,
                                  cpy2,
                                  seg.end.x,
                                  seg.end.y);
    }
  },

  onTimerComplete: function () {
    var lose = false;
    for (var i = 0; i < this.segments.length; i++) {
      if (!this.segments[i].leveled || this.segments[i].leveled === undefined) {
        lose = true;
        break;
      }
    }

    if (lose) this.lose();
    else this.win();
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Live -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(4000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(4000, this.end, this);
  },

  end: function() {
    this.game.stage.backgroundColor = "#ffffff";
    this.game.state.start('Game');
  }
};

module.exports = FlatTaxGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/SwipeManager.js":"/Users/borden/src/sagdx/src/js/utilities/SwipeManager.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/froggame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');
var WIN_X = 1080;
var PLAYER_Y = 290;
var SHOE_Y = 470;

var FrogGame = function () {
};

FrogGame.prototype = {
  create: function () {
    var self = this;

    this.bad = this.game.add.audio('bad');
    this.blip = this.game.add.audio('blip');
    this.good = this.game.add.audio('good');

    if (!this.game.device.desktop) this.input.onDown.add(this.goFullscreen, this);

    this.game.world.width = 1200;
    this.game.camera.setBoundsToWorld();

    this.TextManager = new TextManager(this.game);
    this.Timer = null;

    this.background = this.game.add.image(0, 0, 'frogHaus');
    this.player = this.game.add.sprite(this.game.width / 2, 290, 'frogPlayer');
    this.player.animations.add('idle', [0]);
    this.player.animations.add('left', [1]);
    this.player.animations.add('right', [2]);
    this.player.animations.play('idle', 0, true);

    this.frog = this.game.add.sprite(this.player.x - 350, PLAYER_Y, 'frogChaser');
    this.frog.animations.add('run');
    this.frog.animations.play('run', 10, true);

    this.setupShoes();

    this.frogSpeed = 1.5 + window.SpeedMultiplier;
    this.playerSpeed = 25 + window.SpeedMultiplier;

    this.ready = false;

    this.game.camera.follow(this.player);

    this.inter = new Interstitial(this.game, "GET OUT", 1500, function() {
      this.inter.destroy();
      this.ready = true;
    }, this);
  },

  goFullscreen: function() {
    if(this.game.scale.isFullScreen) return;
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.startFullScreen(true);
  },

  setupShoes: function() {
    this.leftShoe = this.game.add.sprite(65, SHOE_Y, 'leftShoe');
    this.rightShoe = this.game.add.sprite(295, SHOE_Y, 'rightShoe');

    this.leftShoe.animations.add('idle', [0]);
    this.rightShoe.animations.add('idle', [0]);
    this.leftShoe.animations.add('flash', [1,2]);
    this.rightShoe.animations.add('flash', [1,2]);

    this.leftShoe.fixedToCamera = true;
    this.rightShoe.fixedToCamera = true;

    this.leftShoe.inputEnabled = false;
    this.rightShoe.inputEnabled = false;

    this.leftShoe.events.onInputDown.add(function() {
      this.player.animations.play('left', 10, false);
      this.player.events.onAnimationComplete.add(this.idlePlayer, this);
      this.movePlayer();
      this.activateShoe(this.rightShoe, this.leftShoe);
    }, this);

    this.rightShoe.events.onInputDown.add(function() {
      this.player.animations.play('right', 10, false);
      this.player.events.onAnimationComplete.add(this.idlePlayer, this);
      this.movePlayer();
      this.activateShoe(this.leftShoe, this.rightShoe);
    }, this);

    this.activateShoe(this.leftShoe, this.rightShoe);
  },

  activateShoe: function(activeShoe, unactiveShoe) {
    activeShoe.animations.play('flash', 50, true);
    activeShoe.inputEnabled = true;

    unactiveShoe.animations.play('idle', 50, true);
    unactiveShoe.inputEnabled = false;
  },

  idlePlayer: function() {
    this.player.animations.play('idle', 5, true);
  },

  update: function() {
    if (!this.ready) return;

    if(this.frog.x + (this.frog.width * 0.666) > this.player.x) this.lose();

    if(this.player.x > WIN_X) this.win();

    this.moveFrogTowardPlayer();
  },

  movePlayer: function() {
    this.blip.play('', 0, 0.6);
    if (!this.ready) return;
    this.player.x += this.playerSpeed;
  },

  moveFrogTowardPlayer: function() {
    if (this.frog.x < this.player.x) this.frog.x += this.frogSpeed;
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(2000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(2000, this.end, this);
  },

  end: function() {
    this.game.state.start('Game');
  }
};

module.exports = FrogGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/game.js":[function(require,module,exports){
var SwipeManager = require('../utilities/SwipeManager.js');
var CinderProfile = require('../entities/CinderProfile.js');
var ProfileReveal = require('../entities/ProfileReveal.js');
var TextManager = require('../utilities/TextManager.js');

var Game = function () {
  currentCinderProfile = null;
  lastSwipeDirection = SwipeManager.SWIPE_DIRECTIONS.RIGHT;
  swipeScore = 20;
};

Game.prototype = {
  create: function () {
    if (window.Lives <= 0)
      this.game.state.start('gameover');

    this.game.stage.backgroundColor = '#ffffff';
    this.game.world.width = 414;
    this.game.plugins.add(new SwipeManager(this.game, this.swipe, this));
    this.TextManager = new TextManager(this.game);
    currentCinderProfile = new CinderProfile(this.game, lastSwipeDirection);

    /*
    if (!this.game.device.desktop &&
       !this.game.device.iOS) this.input.onDown.add(this.goFullscreen, this);
     */

    this.header = this.add.sprite(0, 0, 'header');
    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('yay');
    this.wabang = this.game.add.audio('wabang');

    this.xButton = this.add.button(115, 485, 'xButton', this.nopeButtonCallback.bind(this));
    this.heartButton = this.add.button(207, 485, 'heartButton', this.yepButtonCallback.bind(this));

    this.hearts = [];

    var heartPadding = 8;
    var cinderFrameW = this.game.cache.getImage('cinderFrame').width;
    var startX = (this.game.width - cinderFrameW) / 2;
    for (var i = 0; i < window.Lives; i++) {
      var h = null;

      // lives sprite / animation
      if (i === 4) startX = startX + this.xButton.width * 2 + 14;
      if (i % 2 !== 0) {
        h = this.game.add.sprite(startX + ((i - 1) / 2) * (32 + heartPadding),
                                this.xButton.y + this.xButton.height / 2 - 16,
                                'heart');
      }
      else {
        h = this.game.add.sprite(startX + (i / 2) * (32 + heartPadding) + 8,
                                 this.xButton.y + this.xButton.height / 2 - 8,
                                 'smallheart');
      }

      this.hearts.push(h);
    }

    this.baseSwipeScore = 25;
    this.swipeScore = this.baseSwipeScore;
    this.updateTime = 0;

    this.swipeEnabled = true;

    if (window.Games === window.TOTAL_GAMES)
      this.TextManager.addFloatingText('critical omission.',
                                       'down',
                                       'something, something,',
                                       null,
                                       null,
                                       20);
  },

  goFullscreen: function() {
    if(this.game.scale.isFullScreen) return;
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.startFullScreen(true);
  },

  swipe: function(swipeDirection) {
    if (!this.swipeEnabled) return;
    this.swipeEnabled = false;

    window.Games += 1;

    var to = -this.game.width * 3;
    var angle = -90;

    lastSwipeDirection = swipeDirection;

    if (swipeDirection == SwipeManager.SWIPE_DIRECTIONS.RIGHT) {
      this.good.play();
      window.PlayedGames += 1;
      to = to * -1;
      angle = angle * -1;
    } else {
      this.bad.play();
      window.Lives -= 1;
      this.hearts[this.hearts.length - 1].destroy();
      this.hearts.splice(this.hearts.length - 1, 1);

      if (window.Lives <= 0)
        this.game.state.start('gameover');

      this.swipePenalty();
    }

    this.swipeTo(to, angle);
  },

  swipePenalty: function() {
    window.Score -= this.baseSwipeScore;

    this.TextManager.addFloatingText('-' + this.baseSwipeScore, "up", 'boo');
  },

  onSwipeComplete: function() {
    if (lastSwipeDirection == 1) this.reveal();
    else this.nextProfile();
  },

  reveal: function() {
    this.wabang.play();
    this.currentReveal = new ProfileReveal(this.game, 0, this.header.height, currentCinderProfile.profile);

    this.game.add.existing(this.currentReveal);

    //This timeout forces them to look at the reveal image for at least a bit
    this.game.time.events.add(300, function() {
      this.currentReveal.events.onInputDown.add(this.endReveal.bind(this), this);
    }, this);

    this.revealTimeout = this.game.time.events.add(3000, this.endReveal, this);
  },

  endReveal: function() {
    if (this.revealTimeout) this.game.time.events.remove(this.revealTimeout);

    this.currentReveal.kill();

    if (typeof currentCinderProfile.profile.minigame !== "undefined" &&
        lastSwipeDirection === currentCinderProfile.profile.minigameDirection)
      this.game.state.start(currentCinderProfile.profile.minigame);
    else
      this.nextProfile();

  },

  nextProfile: function() {
    currentCinderProfile = new CinderProfile(this.game, lastSwipeDirection);
    this.swipeScore = this.baseSwipeScore;
    this.swipeEnabled = true;

    if (window.Games === window.TOTAL_GAMES)
      this.TextManager.addFloatingText('critical omission.',
                                       'down',
                                       'something, something,',
                                       null,
                                       null,
                                       20);
  },

  update: function () {
    this.updateTime += 1;
    if (this.swipeScore > 1 && this.updateTime % 10 === 0) {
      this.swipeScore -= 1;
    }
  },

  onTimerTweenComplete: function() {
    this.bad.play();
  },

  nopeButtonCallback: function() {
    console.log('here');
    this.swipe(SwipeManager.SWIPE_DIRECTIONS.LEFT);
  },

  yepButtonCallback: function() {
    this.swipe(SwipeManager.SWIPE_DIRECTIONS.RIGHT);
  },

  swipeTo: function(to, angle) {
    var stampW = this.game.cache.getImage('nope').width;
    var frameW = this.game.cache.getImage('cinderFrame').width;
    var nopeY = currentCinderProfile.y + frameW - stampW;
    var stamp = null;

    if (to > 0)
      stamp = this.game.add.sprite(currentCinderProfile.y + 32, currentCinderProfile.x + 64, 'like');
    else
      stamp = this.game.add.sprite(nopeY, currentCinderProfile.x + 64, 'nope');

    currentCinderProfile.addChild(stamp);

    var tween = this.game.add.tween(currentCinderProfile);
    //using setTimeout to show reveal before tween completes (hack?)
    this.game.time.events.add(700, this.onSwipeComplete.bind(this), this);
    tween.to({ x: to, y: this.game.height / 3, angle: angle }, 1000, Phaser.Easing.Cubic.Out, false, 200);
    tween.start();
  }
};

module.exports = Game;

},{"../entities/CinderProfile.js":"/Users/borden/src/sagdx/src/js/entities/CinderProfile.js","../entities/ProfileReveal.js":"/Users/borden/src/sagdx/src/js/entities/ProfileReveal.js","../utilities/SwipeManager.js":"/Users/borden/src/sagdx/src/js/utilities/SwipeManager.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/gameover.js":[function(require,module,exports){
var GameOver = function () {
};

module.exports = GameOver;

GameOver.prototype = {
  create: function () {

    this.tada = this.game.add.audio('tada');
    this.game.stage.backgroundColor = '#ffffff';
    this.emitter = null;

    var endText = "GAME OVER!";
    var textProps = { font: '24pt Arial',
                      fill: '#C24300',
                      strokeThickness: 0 };
    var textPropsScore = {
      font: '24pt Arial',
      fill: '#000000',
      strokeThickness: 0
    };
    var flavorProps = {
      font: '20px Arial',
      fill: '#000000',
      align: 'center',
      wordWrap: true,
      wordWrapWidth: this.game.width - 30
    };

    var text = this.game.add.text(0, 0, endText, textProps);
    var scoreTitle = this.game.add.text(0, 0, "Final Score:", textPropsScore);
    this.scoreText = this.game.add.text(0, 0, '1000', textPropsScore);
    this.updateCnt = 0;
    this.counter = 0;
    this.scoreDone = false;

    text.x = (this.game.width / 2) - (text.width / 2);
    text.y = (this.game.height / 2) - (text.height / 2);
    scoreTitle.x = (this.game.width / 2) - (scoreTitle.width / 2);
    scoreTitle.y = text.y + 50;
    this.scoreText.x = (this.game.width / 2) - (this.scoreText.width / 2);
    this.scoreText.y = text.y + 80;

    var flavorText = null;
    if (window.PlayedGames >= window.TOTAL_GAMES) {
      flavorText = "Wow, you played all of the games. You think that's something that" +
        " should be rewarded?";
    } else if (window.Games >= window.TOTAL_GAMES) {
      flavorText = "Wow, you couldn't even play through all of the games, and you expect" +
        " a reward or something?";
    }
    else {
      flavorText = "You're a loser.";
    }

    var flavor = this.game.add.text(0, 0, flavorText, flavorProps);
    flavor.x = (this.game.width / 2) - (flavor.width / 2);
    flavor.y = text.y - 200;

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
    if (!this.scoreDone) {
      this.updateCnt += 1;

      if (this.updateCnt % this.counter === 0)
        this.scoreText.setText(this.game.rnd.integerInRange(0, 5000));

      if (this.updateCnt % 20 === 0) this.counter++;
      if (this.counter >= 20) {
        this.scoreText.setText(0);
        this.scoreText.x = (this.game.width / 2) - (this.scoreText.width / 2);
        this.emitter = this.game.add.emitter(this.scoreText.x + (this.scoreText.width / 2),
                                             this.scoreText.y + (this.scoreText.height / 2),
                                             100);
        this.emitter.makeParticles('spark');
        this.emitter.start(false, 1500, 75);
        this.scoreDone = true;
        this.tada.play();
      }

      this.scoreText.x = (this.game.width / 2) - (this.scoreText.width / 2);
    }
  },

  reset: function() {
    window.Lives = 8;
    window.SpeedMultipler = 1;
    window.Games = 0;
    window.PlayedGames = 0;
    window.Score = 0;
  },

  onDown: function () {
    if (!this.scoreDone) return;
    this.reset();

    if (!this.game.device.desktop) {
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.startFullScreen(true);
    }

    this.restartGame();
  },

  restartGame: function() {
    if (this.game.device.desktop) {
      this.game.state.start('warning');
    } else {
      this.game.state.start('SAGDX');
    }
  }
};

},{}],"/Users/borden/src/sagdx/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
};

module.exports = Menu;

Menu.prototype = {
  create: function () {
    this.game.stage.backgroundColor = '#ffffff';

    var startText = "Press to start!";
    var textProps = { font: '24pt Arial',
                      fill: '#C24300',
                      strokeThickness: 0 };

    var cinderLogoW = this.game.cache.getImage('cinderLogo').width;
    var cinderLogoH = this.game.cache.getImage('cinderLogo').height;

    var x = (this.game.width / 2) - (cinderLogoW / 2);
    var y = (this.game.height / 3) - (cinderLogoH / 2);

    this.game.add.sprite(x, y, 'cinderLogo');
    this.game.add.text(x, y + cinderLogoH * 1.5, startText, textProps);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    if (!this.game.device.desktop) {
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.startFullScreen(true);
    }

    this.game.state.start('Game');
  }
};

},{}],"/Users/borden/src/sagdx/src/js/states/mermaidgame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');

var MermaidGame = function () {
};

MermaidGame.prototype = {
  create: function () {

    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');
    this.wabang = this.game.add.audio('wabang');

    this.gameTime = 4000;
    this.TextManager = new TextManager(this.game);
    this.Timer = null;
    this.game.stage.backgroundColor = '#327ed0';

    this.filter = new Phaser.Filter(this.game, null, waterShader);
    this.filter.setResolution(this.game.stage.width, this.game.stage.height);

    this.ready = false;
    this.clamReady = false;
    this.vuln = !this.clamReady;
    this.lost = false;
    this.attacked = false;

    this.clam = this.game.add.sprite(this.game.width / 3, this.game.height / 3, 'clam');
    this.clam.animations.add('shut');
    this.clam.animations.add('open', [3, 2, 1, 0]);

    this.attackers = [];
    this.fish = [];

    var fishCount = Math.floor((Math.random() * 4) + 1);
    for (var i = 0; i < fishCount; i++) {
      var yOffset = Math.floor((Math.random() * 150) + 50);
      var baseX = (i == 0 || i == 2) ? 64 : this.game.width - 100;
      var baseY = (i == 3 || i == 2) ? this.game.height - 64 - yOffset : 64 + yOffset;

      var fishTmp = this.game.add.sprite(baseX, baseY, 'fish');
      fishTmp.anchor.setTo(0.5, 1);
      fishTmp.animations.add('swim');
      fishTmp.animations.play('swim', 5, true);
      fishTmp.attacker = (Math.floor((Math.random() * 10) + 1)) > 7;
      fishTmp.facingLeft = (Math.floor((Math.random() * 2) + 1)) > 1;

      if (!fishTmp.facingLeft)
        fishTmp.scale.x = -1;

      if (this.attackers.length == 0 && i == fishCount - 1)
        fishTmp.attacker = true;

      if (fishTmp.attacker) {
        var countDown = this.gameTime -
              (Math.floor((Math.random() * (this.gameTime / 2)) + 1));
        fishTmp.time = countDown;
        fishTmp.attacked = false;
        this.attackers.push(fishTmp);
      }

      this.fish.push(fishTmp);
    }

    this.input.onDown.add(this.onDown, this);
    this.clamCooldown = 2000;
    this.clamDown = 750;

    this.inter = new Interstitial(this.game, "PROTECT THE CLAM", 1500, function() {
      this.inter.destroy();
      this.ready = true;
      this.clamReady = true;
      var filterSprite = this.game.add.sprite();
      filterSprite.width = this.game.stage.width;
	    filterSprite.height = this.game.stage.height;
      filterSprite.fixedToCamera = false;
	    filterSprite.filters = [ this.filter ];
      this.Timer = new Timer(this.game, this.gameTime, this.onTimerComplete, this, true);
      this.Timer.start();
    }, this);
  },

  update: function () {
    if (!this.ready)
      return;

    this.filter.update(this.game.input.activePointer);
    for (var i = 0; i < this.attackers.length; i++) {
      if (this.Timer.timer.timer.duration <= this.attackers[i].time &&
          this.Timer.timer.timer.duration != 0 &&
          !this.attackers[i].attacked) {
        this.attackers[i].attacked = true;

        if (this.attackers[i].x < this.clam.x &&
            this.attackers[i].facingLeft)
          this.attackers[i].scale.x = -1;
        else if (this.attackers[i].x > this.clam.x &&
                 !this.attackers[i].facingLeft)
          this.attackers[i].scale.x = 1;

        var tween = this.game.add.tween(this.attackers[i])
              .to({ x: this.clam.x + (this.clam.width / 2.5),
                    y: this.clam.y + (this.clam.height / 2) },
                  760 - (window.SpeedMultiplier * 20),
                  Phaser.Easing.Linear.None,
                  false,
                  100 - (window.SpeedMultipler * 20))
              .start();
      }

      if (this.attackers[i].attacked) {
        var boundsClam = Phaser.Rectangle.inflate(this.clam.getBounds(), -70, -80);
        boundsClam.y += 20;
        boundsClam.x -= 25;
        var boundsAttacker = this.attackers[i].getBounds();

        if (Phaser.Rectangle.intersects(boundsClam, boundsAttacker)) {
          if (this.vuln) {
            this.lost = true;
          } else {
            var tmp = this.attackers[i];
            var run = this.game.add.tween(tmp)
                  .to({ x: Math.floor(Math.random() * this.game.width),
                        y: -100 },
                      850,
                      Phaser.Easing.Linear.None,
                      false,
                      0);
            run.onComplete.add(function() { tmp.destroy(); });
            run.start();
            this.attackers.splice(i, 1);
          }
        }
      }
    }

    for (var i = 0; i < this.fish.length; i++) {
      if (!this.fish[i].attacked) {
      if (this.fish[i].x > this.game.width ||
          this.fish[i].x < 0) {
        this.fish[i].facingLeft = !this.fish[i].facingLeft;
        this.fish[i].scale.x *= -1;
      }

      var dir = 0.5;
      if (this.fish[i].facingLeft)
        dir *= -1;
      this.fish[i].x += dir;
      }
    }
  },

  onTimerComplete: function () {
    if (!this.lost)
      this.win();
    else
      this.lose();
  },

  lose: function () {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(4000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(4000, this.end, this);
  },

  onDown: function () {
    if (!this.ready || !this.clamReady)
      return;

    this.clam.animations.play('shut', 20);
    this.wabang.play();
    this.clamReady = false;
    this.vuln = false;
    this.game.time.events.add(this.clamCooldown, function() { this.clamReady = true; }.bind(this));
    this.game.time.events.add(this.clamDown,
                              function() {
                                this.clam.animations.play('open', 20);
                                this.vuln = true;
                              }.bind(this));
  },

  end: function() {
    this.game.stage.backgroundColor = '#ffffff';
    this.game.state.start('Game');
  }
};

module.exports = MermaidGame;

var waterShader = [
    "precision mediump float;",
    "uniform float     time;",
    "uniform vec2      resolution;",
    "uniform vec2      mouse;",
    "#define MAX_ITER 4",
    "void main( void )",
    "{",
        "vec2 v_texCoord = gl_FragCoord.xy / resolution;",
        "vec2 p =  v_texCoord * 8.0 - vec2(20.0);",
        "vec2 i = p;",
        "float c = 0.8;",
        "float inten = .03;",
        "for (int n = 0; n < MAX_ITER; n++)",
        "{",
            "float t = time * (1.0 - (3.0 / float(n+1)));",
            "i = p + vec2(cos(t - i.x) + sin(t + i.y),",
            "sin(t - i.y) + cos(t + i.x));",
            "c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),",
            "p.y / (cos(i.y+t)/inten)));",
        "}",
        "c /= float(MAX_ITER);",
        "c = 1.5 - sqrt(c);",
        "vec4 texColor = vec4(0.0, 0.01, 0.015, 0.2);",
        "texColor.rgb *= (1.0 / (1.0 - (c + 0.05)));",
        "gl_FragColor = texColor;",
    "}"
];

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/preloader.js":[function(require,module,exports){
var CinderProfiles = require('../data/CinderProfiles.js');

var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    var assetRoot = 'assets/';

    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('SAGDX', 'assets/sagdx_logo.png');
    this.load.image('cinderLogo', 'assets/cinder-logo.png');
    this.load.image('cinderFrame', 'assets/cinder-frame.png');
    this.load.image('match', 'assets/its_a_match.jpg');
    this.load.image('nope', 'assets/NOPE.png');
    this.load.image('like', 'assets/like.png');
    this.load.image('header', 'assets/header.png');
    this.load.image('xButton', 'assets/x_button.png');
    this.load.image('heartButton', 'assets/heart_button.png');
    this.load.image('revealTextArea', 'assets/reveal_text_area.jpg');
    this.load.image('timer-animation', 'assets/timer-animation.png');
    this.load.image('foot', 'assets/foot.png');
    this.load.image('slipper', 'assets/slipper.png');
    this.load.image('spark', 'assets/particle.png');
    this.load.image('taxbg', 'assets/taxbg.png');

    this.load.image('heart', 'assets/heart.png');
    this.load.image('smallheart', 'assets/heartsmall.png');

    this.load.image('frogHaus', 'assets/froghaus_color.jpg');
    this.load.spritesheet('frogPlayer', 'assets/naked_runner.png', 160, 190, 3);
    this.load.spritesheet('frogChaser', 'assets/frogrun.png', 152, 189, 4);
    this.load.spritesheet('leftShoe', 'assets/left_shoe.png', 48, 110, 3);
    this.load.spritesheet('rightShoe', 'assets/right_shoe.png', 48, 110, 3);
    this.game.load.audio('blip', 'assets/sounds/blip.mp3');

    this.load.image('snakeBite', 'assets/snake_bite.png');
    this.load.spritesheet('snake', 'assets/snake_sprite.png', 173, 416, 2);
    this.load.spritesheet('condom', 'assets/condom_sprite.png', 208, 499, 4);
    this.game.load.audio('hiss', 'assets/sounds/hiss.mp3');

    this.load.image('cosbyBg', 'assets/cosby_bg.jpg');
    this.load.image('cup', 'assets/solo_cup.png');
    this.load.spritesheet('pill', 'assets/pill.png', 50, 50, 6);
    this.load.spritesheet('splash', 'assets/splash.png', 250, 90, 4);

    this.load.image('tchBackground', 'assets/tch_bg.jpg');
    this.load.spritesheet('vase', 'assets/vase.png', 29, 40, 2);
    this.load.spritesheet('bottle', 'assets/bottle.png', 35, 35, 2);
    this.load.spritesheet('coatRack', 'assets/coat_rack.png', 53, 176, 2);
    this.load.spritesheet('cat', 'assets/cat.png', 53, 24, 4);
    this.game.load.audio('crash', 'assets/sounds/crash.mp3');

    this.load.spritesheet('clam', 'assets/clam.png', 202, 215, 4);
    this.load.spritesheet('fish', 'assets/fish.png', 75, 50, 4);

    this.load.spritesheet('skelly', 'assets/skelly.png', 383, 500, 6);
    this.load.spritesheet('up-arrow', 'assets/up-arrow.png', 50, 90, 4);
    this.load.spritesheet('down-arrow', 'assets/down-arrow.png', 50, 90, 4);
    this.load.spritesheet('right-arrow', 'assets/right-arrow.png', 90, 50, 4);
    this.load.spritesheet('left-arrow', 'assets/left-arrow.png', 90, 50, 4);
    this.game.load.audio('yay', 'assets/sounds/yay-ding.mp3');
    this.game.load.audio('boo', 'assets/sounds/boo-ding.mp3');

    this.game.load.audio('good', 'assets/sounds/good.wav');
    this.game.load.audio('bad', 'assets/sounds/bad.wav');
    this.game.load.audio('wabang', 'assets/sounds/wa-bang.wav');
    this.game.load.audio('bgMusic', 'assets/sounds/sagdx.mp3');
    this.game.load.audio('tada', 'assets/sounds/tada.mp3');

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);

    window.CurrentProfileIdx = -1;
    window.CinderProfiles = this.shuffleProfiles();

    this.load.image('cinderLogo', assetRoot + 'cinder-logo.png');
    this.load.image('cinderFrame', assetRoot + 'cinder-frame.png');

    for (var i = 0; i < window.CinderProfiles.length; i++) {
      var profile = window.CinderProfiles[i];
      this.load.image(profile.image, assetRoot + profile.image);
      this.load.image(profile.revealImage, assetRoot + profile.revealImage);
      if(!!profile.revealImage2) this.load.image(profile.revealImage2, assetRoot + profile.revealImage2);
    }
  },

  shuffleProfiles: function() {
    var currentIdx = CinderProfiles.PROFILES.length, tmp, randomIdx;

    while (0 !== currentIdx) {
      randomIdx = Math.floor(Math.random() * currentIdx);
      currentIdx -= 1;

      tmp = CinderProfiles.PROFILES[currentIdx];
      CinderProfiles.PROFILES[currentIdx] = CinderProfiles.PROFILES[randomIdx];
      CinderProfiles.PROFILES[randomIdx] = tmp;
    }

    return CinderProfiles.PROFILES;
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('ClickMe');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{"../data/CinderProfiles.js":"/Users/borden/src/sagdx/src/js/data/CinderProfiles.js"}],"/Users/borden/src/sagdx/src/js/states/sagdx.js":[function(require,module,exports){
var SAGDX = function () {
};

module.exports = SAGDX;

SAGDX.prototype = {
  create: function () {
    if(!window.bgMusic) {
      window.bgMusic = this.game.add.audio('bgMusic');
      window.bgMusic.play('', 0, 0.7, true);
    }
    this.blue = true;
    this.game.stage.backgroundColor = '#9CD4E6';

    var logoW = this.game.cache.getImage('SAGDX').width;
    var logoH = this.game.cache.getImage('SAGDX').height;

    var x = (this.game.width / 2) - (logoW / 2);
    var y = (this.game.height / 2) - (logoH / 2);

    this.game.add.sprite(x, y, 'SAGDX');

    this.input.onDown.add(this.onDown, this);
    this.timeout = this.game.time.events.add(3000, this.startGame, this);
  },

  update: function () {
    if(this.blue) {
      this.game.stage.backgroundColor = '#ACE4F6';
      this.blue = false;
    } else {
      this.game.stage.backgroundColor = '#8CC4D6';
      this.blue = true;
    }
  },

  onDown: function () {
    if (!this.game.device.desktop) {
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.startFullScreen(true);
    }

    this.startGame();
  },

  startGame: function() {
    this.game.state.start('Menu');
  }
};

},{}],"/Users/borden/src/sagdx/src/js/states/snakegame.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');
var SwipeManager = require('../utilities/SwipeManager.js');

var SWIPES_PER_STAGE = 4;
var BASE_STAGE_TIME = 1600;

var SnakeGame = function () {
};

SnakeGame.prototype = {
  create: function () {
    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');
    this.hiss = this.game.add.audio('hiss');

    if (!this.game.device.desktop) this.input.onDown.add(this.goFullscreen, this);

    this.TextManager = new TextManager(this.game);

    this.game.stage.backgroundColor = '#2b2544';

    this.game.plugins.add(new SwipeManager(this.game, this.swipe, this, true));

    this.TimeUp = new Timer(this.game, 10000, this.onTimeUp, this);

    this.stageTime = BASE_STAGE_TIME - (window.SpeedMultiplier * 100);

    this.condomTimer = null;

    this.snake = this.game.add.sprite(0, 190, 'snake');
    this.condom = this.game.add.sprite(0, 95, 'condom');

    this.condomState = 0;
    this.swipeCount = 0;

    this.snake.x = (this.game.width / 2) - (this.snake.width / 2);
    this.condom.x = (this.game.width / 2) - (this.condom.width / 2);

    this.snake.animations.add('wriggle');
    this.snake.animations.play('wriggle', 1.2 * window.SpeedMultiplier, true);

    this.ready = false;

    this.inter = new Interstitial(this.game, "WRAP IT UP", 1500, function() {
      this.inter.destroy();
      this.ready = true;
      this.TimeUp.start();
    }, this);
  },

  goFullscreen: function() {
    if(this.game.scale.isFullScreen) return;
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.startFullScreen(true);
  },

  update: function() {
    if (!this.ready) return;
  },

  swipe: function(swipeDirection) {
    if(!this.ready) return;

    if (swipeDirection == SwipeManager.SWIPE_DIRECTIONS.DOWN) {
      this.onSwipeDown();
    }
  },

  onSwipeDown: function() {
    this.swipeCount++;
    if(this.swipeCount >= SWIPES_PER_STAGE) this.changeCondomState(1);
  },

  restartCondomTimer: function() {
    var timeEvents = this.game.time.events;
    if(this.condomTimer) timeEvents.remove(this.condomTimer);

    this.condomTimer = timeEvents.add(this.stageTime, this.retreatCondom, this);
  },

  retreatCondom: function() {
    this.changeCondomState(-1);
  },

  changeCondomState: function(change) {
    if (!this.ready) return;

    this.restartCondomTimer();

    this.swipeCount = 0;

    this.condomState += change;

    if(this.condomState < 0) {
      this.condomState = 0;
      return;
    };

    this.condom.frame = this.condomState;

    if(this.condomState > 2) {
      this.win();
      return;
    };
  },

  onTimeUp: function () {
    this.snakeBite();
    this.lose();
  },

  snakeBite: function () {
    this.game.add.image(80, 45, 'snakeBite');
    this.condom.angle += 35;
  },

  lose: function () {
    this.bad.play();
    this.hiss.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(2000, this.end, this);
  },

  win: function () {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.TimeUp.end();
    this.game.time.events.add(2000, this.end, this);
  },

  end: function() {
    this.game.state.start('Game');
    this.game.stage.backgroundColor = '#FFFFFF';
  }
};

module.exports = SnakeGame;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/SwipeManager.js":"/Users/borden/src/sagdx/src/js/utilities/SwipeManager.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/borden/src/sagdx/src/js/states/thiscatishorseshit.js":[function(require,module,exports){
var TextManager = require('../utilities/TextManager.js');
var Interstitial = require('../entities/Interstitial.js');
var Timer = require('../entities/Timer.js');
var BASE_CAT_X_VEL = 200;
var BASE_CAT_Y_VEL = 100;

var Collidable = function(game, x, y, sprite, broken) {
  Phaser.Sprite.call(this, game, x, y, sprite);

  this.name = sprite;
  this.broken = broken;
}
Collidable.prototype = Object.create(Phaser.Sprite.prototype);
Collidable.prototype.constructor = Collidable;

var ThisCatIsHorseShit = function () {
};

ThisCatIsHorseShit.prototype = {
  create: function () {
    var self = this;

    this.crash = this.game.add.audio('crash');
    this.ding = this.game.add.audio('yay');

    this.bad = this.game.add.audio('bad');
    this.good = this.game.add.audio('good');

    if (!this.game.device.desktop) this.input.onDown.add(this.goFullscreen, this);

    this.background = this.game.add.image(0, 0, 'tchBackground');

    this.TextManager = new TextManager(this.game);
    this.Timer = null;

    this.game.physics.startSystem(Phaser.Physics.ARCADE);

    this.cat = this.game.add.sprite(192, 330, 'cat');

    this.coatRack = this.game.add.existing(new Collidable(this.game, 53, 205, 'coatRack', false));
    this.bottle = this.game.add.existing(new Collidable(this.game, 255, 320, 'bottle', false));
    this.vase = this.game.add.existing(new Collidable(this.game, 361, 279, 'vase', false));

    this.collidables = [this.coatRack, this.vase, this.bottle];

    this.cat.animations.add('run');
    this.cat.animations.play('run', 10, true);

    this.ready = false;

    this.inter = new Interstitial(this.game, "THIS CAT IS HORSESHIT", 2000, function() {
      this.inter.destroy();
      this.ready = true;
      this.initGame();
      this.Timer = new Timer(this.game, 4500, this.onTimeUp, this);
      this.Timer.start();
    }, this);
  },

  initGame: function() {
    this.game.physics.arcade.setBounds(0, 154, 414, 222);

    this.game.physics.enable(this.cat, Phaser.Physics.ARCADE);

    this.initCollidables();
    this.initCat();

  },

  initCollidables: function() {
    for (i in this.collidables) {
      var collidable = this.collidables[i];

      this.game.physics.enable(collidable, Phaser.Physics.ARCADE);
      collidable.body.immovable = true;

      collidable.events.onInputDown.add(this.onClickCollidable , this);
      collidable.inputEnabled = true;
    }
  },

  initCat: function() {
    var randX = Math.floor(Math.random() * 50);
    var randY = Math.floor(Math.random() * 50);
    var randXSign = (Math.random() > .5) ? 1 : -1;
    var randYSign = (Math.random() > .5) ? 1 : -1;

    var speedModifier = ((window.SpeedMultiplier - 1) / 2) + 1;

    var velX = (BASE_CAT_X_VEL + randX * speedModifier) * randXSign;
    var velY = (BASE_CAT_Y_VEL + randY * speedModifier) * randYSign;

    this.cat.body.velocity.setTo(velX, velY);

    this.cat.body.collideWorldBounds = true;

    this.cat.body.bounce.set(1.0);
  },

  onClickCollidable: function(collidable) {
    if (this.ready) {
      collidable.broken = false;
      collidable.frame = 0;
      this.ding.play();
    }
  },

  goFullscreen: function() {
    if(this.game.scale.isFullScreen) return;
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.startFullScreen(true);
  },

  update: function() {
    if (!this.ready) return;

    for(i in this.collidables) {
      var collidable = this.collidables[i];
      this.game.physics.arcade.overlap(this.cat, collidable, function() {
        this.crash.play('', 0, 0.2, false);
        collidable.broken = true;
        collidable.frame = 1;
      }, null, this);
    }
  },

  onTimeUp: function() {
    var brokenItems = 0;

    this.cat.body.velocity.setTo(0,0);

    for (i in this.collidables) {
      if(this.collidables[i].broken) return this.lose();
    }

    this.win();
  },

  lose: function() {
    this.bad.play();
    this.ready = false;
    window.Score -= 100;
    window.Lives -= 2;
    this.TextManager.statusText("LOSE!");
    this.game.time.events.add(2000, this.end, this);
  },

  win: function() {
    this.good.play();
    this.ready = false;
    window.SpeedMultiplier += 0.5;
    window.Score += 100;
    this.TextManager.statusText("WIN!");
    this.game.time.events.add(2000, this.end, this);
  },

  end: function() {
    this.game.state.start('Game');
  }
};

module.exports = ThisCatIsHorseShit;

},{"../entities/Interstitial.js":"/Users/borden/src/sagdx/src/js/entities/Interstitial.js","../entities/Timer.js":"/Users/borden/src/sagdx/src/js/entities/Timer.js","../utilities/TextManager.js":"/Users/borden/src/sagdx/src/js/utilities/TextManager.js"}],"/Users/borden/src/sagdx/src/js/states/warning.js":[function(require,module,exports){
var ClickMe = function () {
};

module.exports = ClickMe;

ClickMe.prototype = {
  create: function () {
    this.game.stage.backgroundColor = '#000000';

    var warning = "Warning";
    var warningProps = { font: '48pt Arial',
                      fill: '#C24300',
                      strokeThickness: 0 };

    var info = "this game is best enjoyed";
    var info2 = "on a smart phone";
    var infoProps = { font: '22pt Arial', fill: '#C24300', strokeThickness: 0 };

    var warningText = this.game.add.text(0, 0, warning, warningProps);
    var infoText = this.game.add.text(0, 0, info, infoProps);
    var info2Text = this.game.add.text(0, 0, info2, infoProps);

    warningText.x = (this.game.width / 2) - (warningText.width / 2);
    warningText.y = (this.game.height / 4) - (warningText.height / 2);

    infoText.x = (this.game.width / 2) - (infoText.width / 2);
    infoText.y = (this.game.height / 2) - (infoText.height / 2);

    info2Text.x = (this.game.width / 2) - (info2Text.width / 2);
    info2Text.y = (this.game.height / 1.8) - (info2Text.height / 2);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    if (!this.game.device.desktop) {
      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.startFullScreen(true);
    }

    this.startGame();
  },

  startGame: function() {
    this.game.state.start('SAGDX');
  }
};

},{}],"/Users/borden/src/sagdx/src/js/utilities/SwipeManager.js":[function(require,module,exports){
var SwipeManager = function(game, callback, receiver, verticalIncluded) {
  Phaser.Plugin.call(this, game);
  this.game = game;
  this.onCooldown = false;
  this.cooldown = 0;
  this.checkVert = verticalIncluded || false;
  this.onSwipe = callback.bind(receiver);
  this.swipeDirection = SwipeManager.SWIPE_DIRECTIONS.LEFT;
};

SwipeManager.prototype = Object.create(Phaser.Plugin.prototype);
SwipeManager.prototype.constructor = SwipeManager;

SwipeManager.prototype.update = function() {
  var start = this.game.input.activePointer.positionDown;
  var end = this.game.input.activePointer.position;

  var distance = Phaser.Point.distance(start, end);
  var duration = this.game.input.activePointer.duration;

  if (duration > 0 && !this.onCooldown) {
    if (distance > SwipeManager.SWIPE_DIST && duration < SwipeManager.SWIPE_TIME) {
      swipeDirection = end.x > start.x ? SwipeManager.SWIPE_DIRECTIONS.RIGHT :
        SwipeManager.SWIPE_DIRECTIONS.LEFT;

      if (this.checkVert) {
        var xDist = start.x - end.x;
        var yDist = start.y - end.y;
        if (Math.abs(yDist) > Math.abs(xDist))
          swipeDirection = end.y > start.y ? SwipeManager.SWIPE_DIRECTIONS.DOWN :
            SwipeManager.SWIPE_DIRECTIONS.UP;
      }

      this.onSwipe(swipeDirection, start, end);
      this.onCooldown = true;
    }
  }

  if (this.onCooldown) {
    this.cooldown += 1;

    if (this.cooldown >= SwipeManager.SWIPE_COOLDOWN) {
      this.cooldown = 0;
      this.onCooldown = false;
    }
  }
};

SwipeManager.SWIPE_TIME = 250;
SwipeManager.SWIPE_DIST = 100;
SwipeManager.SWIPE_COOLDOWN = 10;
SwipeManager.SWIPE_DIRECTIONS = {
  LEFT: 0,
  RIGHT: 1,
  UP: 2,
  DOWN: 3
};

module.exports = SwipeManager;

},{}],"/Users/borden/src/sagdx/src/js/utilities/TextManager.js":[function(require,module,exports){
var TextManager = function(game) {
  this.game = game;
  this.bonusTexts = [];
  this.floatingTexts = [];
};

TextManager.prototype.addFloatingText = function(text, dir, reason, x, y, size) {
  var startX = x || this.game.width / 2;
  var startY = y || this.game.height / 2;
  var txtSize = size || 40;
  var direct = dir || "up";
  var target = 64;
  var textReason = null;

  if (direct === "down")
    target = this.game.height - 64;

  var textObj = this.game.add.text(startX, startY, text, { font: txtSize + 'px Arial' });
  console.log(textObj);
  textObj.x -= (textObj.width / 2) + 16;

  if (typeof reason !== "undefined") {
    textReason = this.game.add.text(0, -16, reason, { font: '16px Arial' });
    textObj.addChild(textReason);
  }

  var tween = this.game.add.tween(textObj.scale)
        .to({ y: 1.2, x: 1.2 }, 200, Phaser.Easing.Linear.None, false, 200);
  tween.onComplete.add(function() {
    var tween2 = this.game.add.tween(textObj)
          .to({ y: target , alpha: 0 }, 1000, Phaser.Easing.Linear.None, false, 700);
    tween2.onComplete.add(function() {
      textObj.destroy();
    });
    tween2.start();
  }, this);
  tween.start();
};

TextManager.prototype.statusText = function(text) {
  var x = this.game.camera.x + this.game.width / 2;
  var y =  this.game.camera.y + this.game.height / 2;

  var bg = this.game.add.graphics(0, y - 36);
  bg.beginFill(0x000000, 1);
  bg.boundsPadding = 0;
  bg.drawRect(this.game.camera.x, 0, this.game.camera.x + this.game.width, 64);

  var textObj = this.game.add.text(x, y, text, { font: '40px Arial', fill: '#ffffff' });
  textObj.x -= (textObj.width / 2);
  textObj.y -= (textObj.height / 2);

  var flashTween = this.game.add.tween(textObj);
  flashTween.to({ visible: !textObj.visible }, 20, Phaser.Easing.Linear.None, true, 20, -1, true);
  flashTween.start();
}

module.exports = TextManager;

},{}],"/Users/borden/src/sagdx/src/js/utils.js":[function(require,module,exports){
var Utils = {
  containsObject: function(obj, list) {
    var i;
    for (i = 0; i < list.length; i++) {
      if (list[i] === obj) {
        return true;
      }
    }

    return false;
  }
};

module.exports = Utils;

},{}]},{},["/Users/borden/src/sagdx/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
